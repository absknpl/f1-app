{"ast":null,"code":"const API_BASE = 'https://ergast.com/api/f1';\nexport const fetchData = async endpoint => {\n  try {\n    const response = await fetch(`${API_BASE}/${endpoint}.json`);\n    if (!response.ok) throw new Error('Network response was not ok');\n    const data = await response.json();\n    return data.MRData;\n  } catch (error) {\n    console.error('Error fetching from Ergast API:', error);\n    throw error;\n  }\n};\n\n// Current season data\nexport const getCurrentSeason = async () => {\n  const data = await fetchData('current');\n  return parseInt(data.RaceTable.season, 10);\n};\n\n// Driver standings\nexport const getDriverStandings = async (year = 'current') => {\n  var _data$StandingsTable$;\n  const data = await fetchData(`${year}/driverStandings`);\n  return ((_data$StandingsTable$ = data.StandingsTable.StandingsLists[0]) === null || _data$StandingsTable$ === void 0 ? void 0 : _data$StandingsTable$.DriverStandings) || [];\n};\n\n// Constructor standings\nexport const getConstructorStandings = async (year = 'current') => {\n  var _data$StandingsTable$2;\n  const data = await fetchData(`${year}/constructorStandings`);\n  return ((_data$StandingsTable$2 = data.StandingsTable.StandingsLists[0]) === null || _data$StandingsTable$2 === void 0 ? void 0 : _data$StandingsTable$2.ConstructorStandings) || [];\n};\n\n// Race schedule\nexport const getRaceSchedule = async (year = 'current') => {\n  const data = await fetchData(`${year}`);\n  return data.RaceTable.Races || [];\n};\n\n// Race results\nexport const getRaceResults = async (year = 'current', round) => {\n  const endpoint = round ? `${year}/${round}/results` : `${year}/results`;\n  const data = await fetchData(endpoint);\n  return data.RaceTable.Races || [];\n};","map":{"version":3,"names":["API_BASE","fetchData","endpoint","response","fetch","ok","Error","data","json","MRData","error","console","getCurrentSeason","parseInt","RaceTable","season","getDriverStandings","year","_data$StandingsTable$","StandingsTable","StandingsLists","DriverStandings","getConstructorStandings","_data$StandingsTable$2","ConstructorStandings","getRaceSchedule","Races","getRaceResults","round"],"sources":["/Users/abisek/Library/CloudStorage/OneDrive-MarymountUniversity/MU Codes/repos/f1-app/leaderboard-app/src/api/ergast.js"],"sourcesContent":["const API_BASE = 'https://ergast.com/api/f1';\n\nexport const fetchData = async (endpoint) => {\n  try {\n    const response = await fetch(`${API_BASE}/${endpoint}.json`);\n    if (!response.ok) throw new Error('Network response was not ok');\n    const data = await response.json();\n    return data.MRData;\n  } catch (error) {\n    console.error('Error fetching from Ergast API:', error);\n    throw error;\n  }\n};\n\n// Current season data\nexport const getCurrentSeason = async () => {\n  const data = await fetchData('current');\n  return parseInt(data.RaceTable.season, 10);\n};\n\n// Driver standings\nexport const getDriverStandings = async (year = 'current') => {\n  const data = await fetchData(`${year}/driverStandings`);\n  return data.StandingsTable.StandingsLists[0]?.DriverStandings || [];\n};\n\n// Constructor standings\nexport const getConstructorStandings = async (year = 'current') => {\n  const data = await fetchData(`${year}/constructorStandings`);\n  return data.StandingsTable.StandingsLists[0]?.ConstructorStandings || [];\n};\n\n// Race schedule\nexport const getRaceSchedule = async (year = 'current') => {\n  const data = await fetchData(`${year}`);\n  return data.RaceTable.Races || [];\n};\n\n// Race results\nexport const getRaceResults = async (year = 'current', round) => {\n  const endpoint = round ? `${year}/${round}/results` : `${year}/results`;\n  const data = await fetchData(endpoint);\n  return data.RaceTable.Races || [];\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,2BAA2B;AAE5C,OAAO,MAAMC,SAAS,GAAG,MAAOC,QAAQ,IAAK;EAC3C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,IAAIE,QAAQ,OAAO,CAAC;IAC5D,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChE,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,MAAM;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,MAAML,IAAI,GAAG,MAAMN,SAAS,CAAC,SAAS,CAAC;EACvC,OAAOY,QAAQ,CAACN,IAAI,CAACO,SAAS,CAACC,MAAM,EAAE,EAAE,CAAC;AAC5C,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,IAAI,GAAG,SAAS,KAAK;EAAA,IAAAC,qBAAA;EAC5D,MAAMX,IAAI,GAAG,MAAMN,SAAS,CAAC,GAAGgB,IAAI,kBAAkB,CAAC;EACvD,OAAO,EAAAC,qBAAA,GAAAX,IAAI,CAACY,cAAc,CAACC,cAAc,CAAC,CAAC,CAAC,cAAAF,qBAAA,uBAArCA,qBAAA,CAAuCG,eAAe,KAAI,EAAE;AACrE,CAAC;;AAED;AACA,OAAO,MAAMC,uBAAuB,GAAG,MAAAA,CAAOL,IAAI,GAAG,SAAS,KAAK;EAAA,IAAAM,sBAAA;EACjE,MAAMhB,IAAI,GAAG,MAAMN,SAAS,CAAC,GAAGgB,IAAI,uBAAuB,CAAC;EAC5D,OAAO,EAAAM,sBAAA,GAAAhB,IAAI,CAACY,cAAc,CAACC,cAAc,CAAC,CAAC,CAAC,cAAAG,sBAAA,uBAArCA,sBAAA,CAAuCC,oBAAoB,KAAI,EAAE;AAC1E,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAOR,IAAI,GAAG,SAAS,KAAK;EACzD,MAAMV,IAAI,GAAG,MAAMN,SAAS,CAAC,GAAGgB,IAAI,EAAE,CAAC;EACvC,OAAOV,IAAI,CAACO,SAAS,CAACY,KAAK,IAAI,EAAE;AACnC,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOV,IAAI,GAAG,SAAS,EAAEW,KAAK,KAAK;EAC/D,MAAM1B,QAAQ,GAAG0B,KAAK,GAAG,GAAGX,IAAI,IAAIW,KAAK,UAAU,GAAG,GAAGX,IAAI,UAAU;EACvE,MAAMV,IAAI,GAAG,MAAMN,SAAS,CAACC,QAAQ,CAAC;EACtC,OAAOK,IAAI,CAACO,SAAS,CAACY,KAAK,IAAI,EAAE;AACnC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}