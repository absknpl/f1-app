{"ast":null,"code":"import { getCurrentSeason, getDriverStandings, getRaceSchedule, getRaceResults } from '../api/ergast';\n\n// Cache for API data\nlet cachedData = {\n  season: null,\n  standings: null,\n  races: null\n};\nexport const loadF1Data = async () => {\n  try {\n    const season = await getCurrentSeason();\n    const [standings, races] = await Promise.all([getDriverStandings(season), getRaceSchedule(season)]);\n    cachedData = {\n      season,\n      standings,\n      races\n    };\n    return cachedData;\n  } catch (error) {\n    console.error('Error loading F1 data:', error);\n    return cachedData;\n  }\n};\nexport const getCurrentStandings = () => {\n  var _cachedData$standings;\n  return ((_cachedData$standings = cachedData.standings) === null || _cachedData$standings === void 0 ? void 0 : _cachedData$standings.map(driver => {\n    var _driver$Constructors$;\n    return {\n      id: driver.Driver.driverId,\n      number: driver.Driver.permanentNumber || 'N/A',\n      name: `${driver.Driver.givenName} ${driver.Driver.familyName}`,\n      team: ((_driver$Constructors$ = driver.Constructors[0]) === null || _driver$Constructors$ === void 0 ? void 0 : _driver$Constructors$.name) || 'Unknown',\n      points: parseInt(driver.points, 10),\n      wins: parseInt(driver.wins, 10),\n      position: parseInt(driver.position, 10)\n    };\n  })) || [];\n};\nexport const getUpcomingRaces = () => {\n  var _cachedData$races;\n  const now = new Date();\n  return ((_cachedData$races = cachedData.races) === null || _cachedData$races === void 0 ? void 0 : _cachedData$races.filter(race => {\n    const raceDate = new Date(race.date);\n    return raceDate > now;\n  }).map(race => ({\n    id: race.round,\n    name: race.raceName,\n    date: race.date,\n    circuit: race.Circuit.circuitName,\n    completed: false\n  }))) || [];\n};\nexport const pointsSystem = {\n  1: 25,\n  2: 18,\n  3: 15,\n  4: 12,\n  5: 10,\n  6: 8,\n  7: 6,\n  8: 4,\n  9: 2,\n  10: 1,\n  fastestLap: 1\n};","map":{"version":3,"names":["getCurrentSeason","getDriverStandings","getRaceSchedule","getRaceResults","cachedData","season","standings","races","loadF1Data","Promise","all","error","console","getCurrentStandings","_cachedData$standings","map","driver","_driver$Constructors$","id","Driver","driverId","number","permanentNumber","name","givenName","familyName","team","Constructors","points","parseInt","wins","position","getUpcomingRaces","_cachedData$races","now","Date","filter","race","raceDate","date","round","raceName","circuit","Circuit","circuitName","completed","pointsSystem","fastestLap"],"sources":["/Users/abisek/Library/CloudStorage/OneDrive-MarymountUniversity/MU Codes/repos/f1-app/leaderboard-app/src/utils/f1Data.js"],"sourcesContent":["import {\n  getCurrentSeason,\n  getDriverStandings,\n  getRaceSchedule,\n  getRaceResults\n} from '../api/ergast';\n\n// Cache for API data\nlet cachedData = {\n  season: null,\n  standings: null,\n  races: null\n};\n\nexport const loadF1Data = async () => {\n  try {\n    const season = await getCurrentSeason();\n    const [standings, races] = await Promise.all([\n      getDriverStandings(season),\n      getRaceSchedule(season)\n    ]);\n    \n    cachedData = {\n      season,\n      standings,\n      races\n    };\n    \n    return cachedData;\n  } catch (error) {\n    console.error('Error loading F1 data:', error);\n    return cachedData;\n  }\n};\n\nexport const getCurrentStandings = () => {\n  return cachedData.standings?.map(driver => ({\n    id: driver.Driver.driverId,\n    number: driver.Driver.permanentNumber || 'N/A',\n    name: `${driver.Driver.givenName} ${driver.Driver.familyName}`,\n    team: driver.Constructors[0]?.name || 'Unknown',\n    points: parseInt(driver.points, 10),\n    wins: parseInt(driver.wins, 10),\n    position: parseInt(driver.position, 10)\n  })) || [];\n};\n\nexport const getUpcomingRaces = () => {\n  const now = new Date();\n  return cachedData.races?.filter(race => {\n    const raceDate = new Date(race.date);\n    return raceDate > now;\n  }).map(race => ({\n    id: race.round,\n    name: race.raceName,\n    date: race.date,\n    circuit: race.Circuit.circuitName,\n    completed: false\n  })) || [];\n};\n\nexport const pointsSystem = {\n  1: 25,\n  2: 18,\n  3: 15,\n  4: 12,\n  5: 10,\n  6: 8,\n  7: 6,\n  8: 4,\n  9: 2,\n  10: 1,\n  fastestLap: 1\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}