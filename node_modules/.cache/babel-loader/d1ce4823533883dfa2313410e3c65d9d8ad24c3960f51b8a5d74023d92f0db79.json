{"ast":null,"code":"import { currentStandings, racesRemaining, pointsSystem } from './f1Data';\nexport const calculateScenario = (raceName, raceResults) => {\n  // Clone current standings to avoid mutation\n  const newStandings = JSON.parse(JSON.stringify(currentStandings));\n\n  // Find the race in racesRemaining\n  const race = racesRemaining.find(r => r.name === raceName);\n  if (!race) return null;\n\n  // Calculate points for each driver based on race results\n  raceResults.forEach(result => {\n    if (!result.driver) return;\n    const driver = newStandings.find(d => d.id === result.driver);\n    if (!driver) return;\n    const position = result.position;\n    const points = pointsSystem[position] || 0;\n    driver.points += points;\n\n    // Update wins and podiums\n    if (position === 1) driver.wins += 1;\n    if (position <= 3) driver.podiums += 1;\n\n    // Update last race result\n    driver.lastRace = `${position}${getOrdinalSuffix(position)}`;\n  });\n\n  // Sort by points descending\n  newStandings.sort((a, b) => b.points - a.points);\n  return {\n    race: raceName,\n    standings: newStandings\n  };\n};\nexport const calculatePointsNeeded = (driver1Id, driver2Id) => {\n  const driver1 = currentStandings.find(d => d.id === driver1Id);\n  const driver2 = currentStandings.find(d => d.id === driver2Id);\n  if (!driver1 || !driver2) return null;\n  const pointsDifference = driver1.points - driver2.points;\n  const racesLeft = racesRemaining.length;\n  return {\n    driver1,\n    driver2,\n    pointsNeeded: pointsDifference + 1,\n    // Need to be at least 1 point ahead\n    avgPerRace: (pointsDifference + 1) / racesLeft,\n    racesLeft\n  };\n};\nconst getOrdinalSuffix = num => {\n  const j = num % 10;\n  const k = num % 100;\n  if (j === 1 && k !== 11) return 'st';\n  if (j === 2 && k !== 12) return 'nd';\n  if (j === 3 && k !== 13) return 'rd';\n  return 'th';\n};","map":{"version":3,"names":["currentStandings","racesRemaining","pointsSystem","calculateScenario","raceName","raceResults","newStandings","JSON","parse","stringify","race","find","r","name","forEach","result","driver","d","id","position","points","wins","podiums","lastRace","getOrdinalSuffix","sort","a","b","standings","calculatePointsNeeded","driver1Id","driver2Id","driver1","driver2","pointsDifference","racesLeft","length","pointsNeeded","avgPerRace","num","j","k"],"sources":["/Users/abisek/Library/CloudStorage/OneDrive-MarymountUniversity/MU Codes/repos/f1-interactive-leaderboard/leaderboard-app/src/utils/calculations.js"],"sourcesContent":["import { currentStandings, racesRemaining, pointsSystem } from './f1Data';\n\nexport const calculateScenario = (raceName, raceResults) => {\n  // Clone current standings to avoid mutation\n  const newStandings = JSON.parse(JSON.stringify(currentStandings));\n  \n  // Find the race in racesRemaining\n  const race = racesRemaining.find(r => r.name === raceName);\n  \n  if (!race) return null;\n  \n  // Calculate points for each driver based on race results\n  raceResults.forEach(result => {\n    if (!result.driver) return;\n    \n    const driver = newStandings.find(d => d.id === result.driver);\n    if (!driver) return;\n    \n    const position = result.position;\n    const points = pointsSystem[position] || 0;\n    \n    driver.points += points;\n    \n    // Update wins and podiums\n    if (position === 1) driver.wins += 1;\n    if (position <= 3) driver.podiums += 1;\n    \n    // Update last race result\n    driver.lastRace = `${position}${getOrdinalSuffix(position)}`;\n  });\n  \n  // Sort by points descending\n  newStandings.sort((a, b) => b.points - a.points);\n  \n  return {\n    race: raceName,\n    standings: newStandings\n  };\n};\n\nexport const calculatePointsNeeded = (driver1Id, driver2Id) => {\n  const driver1 = currentStandings.find(d => d.id === driver1Id);\n  const driver2 = currentStandings.find(d => d.id === driver2Id);\n  \n  if (!driver1 || !driver2) return null;\n  \n  const pointsDifference = driver1.points - driver2.points;\n  const racesLeft = racesRemaining.length;\n  \n  return {\n    driver1,\n    driver2,\n    pointsNeeded: pointsDifference + 1, // Need to be at least 1 point ahead\n    avgPerRace: (pointsDifference + 1) / racesLeft,\n    racesLeft\n  };\n};\n\nconst getOrdinalSuffix = (num) => {\n  const j = num % 10;\n  const k = num % 100;\n  if (j === 1 && k !== 11) return 'st';\n  if (j === 2 && k !== 12) return 'nd';\n  if (j === 3 && k !== 13) return 'rd';\n  return 'th';\n};"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,cAAc,EAAEC,YAAY,QAAQ,UAAU;AAEzE,OAAO,MAAMC,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,WAAW,KAAK;EAC1D;EACA,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACT,gBAAgB,CAAC,CAAC;;EAEjE;EACA,MAAMU,IAAI,GAAGT,cAAc,CAACU,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAKT,QAAQ,CAAC;EAE1D,IAAI,CAACM,IAAI,EAAE,OAAO,IAAI;;EAEtB;EACAL,WAAW,CAACS,OAAO,CAACC,MAAM,IAAI;IAC5B,IAAI,CAACA,MAAM,CAACC,MAAM,EAAE;IAEpB,MAAMA,MAAM,GAAGV,YAAY,CAACK,IAAI,CAACM,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKH,MAAM,CAACC,MAAM,CAAC;IAC7D,IAAI,CAACA,MAAM,EAAE;IAEb,MAAMG,QAAQ,GAAGJ,MAAM,CAACI,QAAQ;IAChC,MAAMC,MAAM,GAAGlB,YAAY,CAACiB,QAAQ,CAAC,IAAI,CAAC;IAE1CH,MAAM,CAACI,MAAM,IAAIA,MAAM;;IAEvB;IACA,IAAID,QAAQ,KAAK,CAAC,EAAEH,MAAM,CAACK,IAAI,IAAI,CAAC;IACpC,IAAIF,QAAQ,IAAI,CAAC,EAAEH,MAAM,CAACM,OAAO,IAAI,CAAC;;IAEtC;IACAN,MAAM,CAACO,QAAQ,GAAG,GAAGJ,QAAQ,GAAGK,gBAAgB,CAACL,QAAQ,CAAC,EAAE;EAC9D,CAAC,CAAC;;EAEF;EACAb,YAAY,CAACmB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACP,MAAM,GAAGM,CAAC,CAACN,MAAM,CAAC;EAEhD,OAAO;IACLV,IAAI,EAAEN,QAAQ;IACdwB,SAAS,EAAEtB;EACb,CAAC;AACH,CAAC;AAED,OAAO,MAAMuB,qBAAqB,GAAGA,CAACC,SAAS,EAAEC,SAAS,KAAK;EAC7D,MAAMC,OAAO,GAAGhC,gBAAgB,CAACW,IAAI,CAACM,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKY,SAAS,CAAC;EAC9D,MAAMG,OAAO,GAAGjC,gBAAgB,CAACW,IAAI,CAACM,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKa,SAAS,CAAC;EAE9D,IAAI,CAACC,OAAO,IAAI,CAACC,OAAO,EAAE,OAAO,IAAI;EAErC,MAAMC,gBAAgB,GAAGF,OAAO,CAACZ,MAAM,GAAGa,OAAO,CAACb,MAAM;EACxD,MAAMe,SAAS,GAAGlC,cAAc,CAACmC,MAAM;EAEvC,OAAO;IACLJ,OAAO;IACPC,OAAO;IACPI,YAAY,EAAEH,gBAAgB,GAAG,CAAC;IAAE;IACpCI,UAAU,EAAE,CAACJ,gBAAgB,GAAG,CAAC,IAAIC,SAAS;IAC9CA;EACF,CAAC;AACH,CAAC;AAED,MAAMX,gBAAgB,GAAIe,GAAG,IAAK;EAChC,MAAMC,CAAC,GAAGD,GAAG,GAAG,EAAE;EAClB,MAAME,CAAC,GAAGF,GAAG,GAAG,GAAG;EACnB,IAAIC,CAAC,KAAK,CAAC,IAAIC,CAAC,KAAK,EAAE,EAAE,OAAO,IAAI;EACpC,IAAID,CAAC,KAAK,CAAC,IAAIC,CAAC,KAAK,EAAE,EAAE,OAAO,IAAI;EACpC,IAAID,CAAC,KAAK,CAAC,IAAIC,CAAC,KAAK,EAAE,EAAE,OAAO,IAAI;EACpC,OAAO,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}