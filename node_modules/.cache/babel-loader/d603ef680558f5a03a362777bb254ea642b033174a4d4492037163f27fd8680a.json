{"ast":null,"code":"const API_BASE = 'https://api.jolpi.ca/ergast/f1';\nexport const fetchData = async endpoint => {\n  try {\n    const response = await fetch(`${API_BASE}/${endpoint}.json`);\n    if (!response.ok) throw new Error('Network response was not ok');\n    const data = await response.json();\n    return data.MRData || data; // Adjusted for new API structure\n  } catch (error) {\n    console.error('Error fetching from F1 2025 API:', error);\n    throw error;\n  }\n};\n\n// 2025 Season Endpoints\nexport const get2025DriverStandings = async () => {\n  var _data$StandingsTable$;\n  const data = await fetchData('2025/driverstandings');\n  return ((_data$StandingsTable$ = data.StandingsTable.StandingsLists[0]) === null || _data$StandingsTable$ === void 0 ? void 0 : _data$StandingsTable$.DriverStandings) || [];\n};\nexport const get2025ConstructorStandings = async () => {\n  var _data$StandingsTable$2;\n  const data = await fetchData('2025/constructorstandings');\n  return ((_data$StandingsTable$2 = data.StandingsTable.StandingsLists[0]) === null || _data$StandingsTable$2 === void 0 ? void 0 : _data$StandingsTable$2.ConstructorStandings) || [];\n};\nexport const get2025RaceSchedule = async () => {\n  const data = await fetchData('2025/races');\n  return data.RaceTable.Races || [];\n};\nexport const get2025RaceResults = async round => {\n  const endpoint = round ? `2025/${round}/results` : '2025/results';\n  const data = await fetchData(endpoint);\n  return data.RaceTable.Races || [];\n};\nexport const get2025SprintResults = async round => {\n  const endpoint = round ? `2025/${round}/sprint` : '2025/sprint';\n  const data = await fetchData(endpoint);\n  return data.RaceTable.Races || [];\n};","map":{"version":3,"names":["API_BASE","fetchData","endpoint","response","fetch","ok","Error","data","json","MRData","error","console","get2025DriverStandings","_data$StandingsTable$","StandingsTable","StandingsLists","DriverStandings","get2025ConstructorStandings","_data$StandingsTable$2","ConstructorStandings","get2025RaceSchedule","RaceTable","Races","get2025RaceResults","round","get2025SprintResults"],"sources":["/Users/abisek/Library/CloudStorage/OneDrive-MarymountUniversity/MU Codes/repos/f1-app/leaderboard-app/src/api/ergast.js"],"sourcesContent":["const API_BASE = 'https://api.jolpi.ca/ergast/f1';\n\nexport const fetchData = async (endpoint) => {\n  try {\n    const response = await fetch(`${API_BASE}/${endpoint}.json`);\n    if (!response.ok) throw new Error('Network response was not ok');\n    const data = await response.json();\n    return data.MRData || data; // Adjusted for new API structure\n  } catch (error) {\n    console.error('Error fetching from F1 2025 API:', error);\n    throw error;\n  }\n};\n\n// 2025 Season Endpoints\nexport const get2025DriverStandings = async () => {\n  const data = await fetchData('2025/driverstandings');\n  return data.StandingsTable.StandingsLists[0]?.DriverStandings || [];\n};\n\nexport const get2025ConstructorStandings = async () => {\n  const data = await fetchData('2025/constructorstandings');\n  return data.StandingsTable.StandingsLists[0]?.ConstructorStandings || [];\n};\n\nexport const get2025RaceSchedule = async () => {\n  const data = await fetchData('2025/races');\n  return data.RaceTable.Races || [];\n};\n\nexport const get2025RaceResults = async (round) => {\n  const endpoint = round ? `2025/${round}/results` : '2025/results';\n  const data = await fetchData(endpoint);\n  return data.RaceTable.Races || [];\n};\n\nexport const get2025SprintResults = async (round) => {\n  const endpoint = round ? `2025/${round}/sprint` : '2025/sprint';\n  const data = await fetchData(endpoint);\n  return data.RaceTable.Races || [];\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,gCAAgC;AAEjD,OAAO,MAAMC,SAAS,GAAG,MAAOC,QAAQ,IAAK;EAC3C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,IAAIE,QAAQ,OAAO,CAAC;IAC5D,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChE,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,MAAM,IAAIF,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,sBAAsB,GAAG,MAAAA,CAAA,KAAY;EAAA,IAAAC,qBAAA;EAChD,MAAMN,IAAI,GAAG,MAAMN,SAAS,CAAC,sBAAsB,CAAC;EACpD,OAAO,EAAAY,qBAAA,GAAAN,IAAI,CAACO,cAAc,CAACC,cAAc,CAAC,CAAC,CAAC,cAAAF,qBAAA,uBAArCA,qBAAA,CAAuCG,eAAe,KAAI,EAAE;AACrE,CAAC;AAED,OAAO,MAAMC,2BAA2B,GAAG,MAAAA,CAAA,KAAY;EAAA,IAAAC,sBAAA;EACrD,MAAMX,IAAI,GAAG,MAAMN,SAAS,CAAC,2BAA2B,CAAC;EACzD,OAAO,EAAAiB,sBAAA,GAAAX,IAAI,CAACO,cAAc,CAACC,cAAc,CAAC,CAAC,CAAC,cAAAG,sBAAA,uBAArCA,sBAAA,CAAuCC,oBAAoB,KAAI,EAAE;AAC1E,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7C,MAAMb,IAAI,GAAG,MAAMN,SAAS,CAAC,YAAY,CAAC;EAC1C,OAAOM,IAAI,CAACc,SAAS,CAACC,KAAK,IAAI,EAAE;AACnC,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,KAAK,IAAK;EACjD,MAAMtB,QAAQ,GAAGsB,KAAK,GAAG,QAAQA,KAAK,UAAU,GAAG,cAAc;EACjE,MAAMjB,IAAI,GAAG,MAAMN,SAAS,CAACC,QAAQ,CAAC;EACtC,OAAOK,IAAI,CAACc,SAAS,CAACC,KAAK,IAAI,EAAE;AACnC,CAAC;AAED,OAAO,MAAMG,oBAAoB,GAAG,MAAOD,KAAK,IAAK;EACnD,MAAMtB,QAAQ,GAAGsB,KAAK,GAAG,QAAQA,KAAK,SAAS,GAAG,aAAa;EAC/D,MAAMjB,IAAI,GAAG,MAAMN,SAAS,CAACC,QAAQ,CAAC;EACtC,OAAOK,IAAI,CAACc,SAAS,CAACC,KAAK,IAAI,EAAE;AACnC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}