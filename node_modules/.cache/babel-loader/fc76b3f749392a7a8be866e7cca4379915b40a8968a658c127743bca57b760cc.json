{"ast":null,"code":"import { pointsSystem2025 } from './f1Data';\nexport const calculate2025Scenario = (raceName, raceResults, sprintResults = [], currentStandings) => {\n  const newStandings = JSON.parse(JSON.stringify(currentStandings));\n\n  // Calculate race points\n  raceResults.forEach(result => {\n    const driver = newStandings.find(d => d.id === result.driver);\n    if (!driver) return;\n    const pointsToAdd = pointsSystem2025.race[result.position] || 0;\n    driver.points += pointsToAdd;\n    if (result.position === 1) driver.wins += 1;\n    if (result.position <= 3) driver.podiums = (driver.podiums || 0) + 1;\n  });\n\n  // Calculate sprint points\n  sprintResults.forEach(result => {\n    const driver = newStandings.find(d => d.id === result.driver);\n    if (!driver) return;\n    const pointsToAdd = pointsSystem2025.sprint[result.position] || 0;\n    driver.points += pointsToAdd;\n    driver.sprintPoints = (driver.sprintPoints || 0) + pointsToAdd;\n  });\n\n  // Update positions\n  newStandings.sort((a, b) => b.points - a.points);\n  newStandings.forEach((driver, index) => {\n    driver.position = index + 1;\n  });\n  return {\n    race: raceName,\n    standings: newStandings,\n    hasSprint: sprintResults.length > 0\n  };\n};\nexport const calculatePointsDifference = (driver1Id, driver2Id, currentStandings, racesRemaining) => {\n  const driver1 = currentStandings.find(d => d.id === driver1Id);\n  const driver2 = currentStandings.find(d => d.id === driver2Id);\n  if (!driver1 || !driver2) return null;\n  const pointsDifference = driver1.points - driver2.points;\n  const racesLeft = racesRemaining.length;\n  return {\n    driver1,\n    driver2,\n    pointsNeeded: pointsDifference + 1,\n    avgPerRace: (pointsDifference + 1) / racesLeft,\n    racesLeft,\n    maxPossiblePoints: racesLeft * (pointsSystem2025.race[1] + pointsSystem2025.sprint[1])\n  };\n};","map":{"version":3,"names":["pointsSystem2025","calculate2025Scenario","raceName","raceResults","sprintResults","currentStandings","newStandings","JSON","parse","stringify","forEach","result","driver","find","d","id","pointsToAdd","race","position","points","wins","podiums","sprint","sprintPoints","sort","a","b","index","standings","hasSprint","length","calculatePointsDifference","driver1Id","driver2Id","racesRemaining","driver1","driver2","pointsDifference","racesLeft","pointsNeeded","avgPerRace","maxPossiblePoints"],"sources":["/Users/abisek/Library/CloudStorage/OneDrive-MarymountUniversity/MU Codes/repos/f1-app/leaderboard-app/src/utils/calculations.js"],"sourcesContent":["import { pointsSystem2025 } from './f1Data';\n\nexport const calculate2025Scenario = (raceName, raceResults, sprintResults = [], currentStandings) => {\n  const newStandings = JSON.parse(JSON.stringify(currentStandings));\n\n  // Calculate race points\n  raceResults.forEach(result => {\n    const driver = newStandings.find(d => d.id === result.driver);\n    if (!driver) return;\n    \n    const pointsToAdd = pointsSystem2025.race[result.position] || 0;\n    driver.points += pointsToAdd;\n    \n    if (result.position === 1) driver.wins += 1;\n    if (result.position <= 3) driver.podiums = (driver.podiums || 0) + 1;\n  });\n\n  // Calculate sprint points\n  sprintResults.forEach(result => {\n    const driver = newStandings.find(d => d.id === result.driver);\n    if (!driver) return;\n    \n    const pointsToAdd = pointsSystem2025.sprint[result.position] || 0;\n    driver.points += pointsToAdd;\n    driver.sprintPoints = (driver.sprintPoints || 0) + pointsToAdd;\n  });\n\n  // Update positions\n  newStandings.sort((a, b) => b.points - a.points);\n  newStandings.forEach((driver, index) => {\n    driver.position = index + 1;\n  });\n  \n  return {\n    race: raceName,\n    standings: newStandings,\n    hasSprint: sprintResults.length > 0\n  };\n};\n\nexport const calculatePointsDifference = (driver1Id, driver2Id, currentStandings, racesRemaining) => {\n  const driver1 = currentStandings.find(d => d.id === driver1Id);\n  const driver2 = currentStandings.find(d => d.id === driver2Id);\n  \n  if (!driver1 || !driver2) return null;\n  \n  const pointsDifference = driver1.points - driver2.points;\n  const racesLeft = racesRemaining.length;\n  \n  return {\n    driver1,\n    driver2,\n    pointsNeeded: pointsDifference + 1,\n    avgPerRace: (pointsDifference + 1) / racesLeft,\n    racesLeft,\n    maxPossiblePoints: racesLeft * (pointsSystem2025.race[1] + pointsSystem2025.sprint[1])\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}