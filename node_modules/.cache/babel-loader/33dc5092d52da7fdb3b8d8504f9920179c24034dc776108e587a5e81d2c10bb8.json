{"ast":null,"code":"import{pointsSystem2025}from'./f1Data';export const calculate2025Scenario=function(raceName,raceResults){let sprintResults=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];let currentStandings=arguments.length>3?arguments[3]:undefined;const newStandings=JSON.parse(JSON.stringify(currentStandings));// Calculate race points\nraceResults.forEach(result=>{const driver=newStandings.find(d=>d.id===result.driver);if(!driver)return;const pointsToAdd=pointsSystem2025.race[result.position]||0;driver.points+=pointsToAdd;if(result.position===1)driver.wins+=1;if(result.position<=3)driver.podiums=(driver.podiums||0)+1;});// Calculate sprint points\nsprintResults.forEach(result=>{const driver=newStandings.find(d=>d.id===result.driver);if(!driver)return;const pointsToAdd=pointsSystem2025.sprint[result.position]||0;driver.points+=pointsToAdd;driver.sprintPoints=(driver.sprintPoints||0)+pointsToAdd;});// Update positions\nnewStandings.sort((a,b)=>b.points-a.points);newStandings.forEach((driver,index)=>{driver.position=index+1;});return{race:raceName,standings:newStandings,hasSprint:sprintResults.length>0};};export const calculatePointsDifference=(driver1Id,driver2Id,currentStandings,racesRemaining)=>{const driver1=currentStandings.find(d=>d.id===driver1Id);const driver2=currentStandings.find(d=>d.id===driver2Id);if(!driver1||!driver2)return null;const pointsDifference=driver1.points-driver2.points;const racesLeft=racesRemaining.length;return{driver1,driver2,pointsNeeded:pointsDifference+1,avgPerRace:(pointsDifference+1)/racesLeft,racesLeft,maxPossiblePoints:racesLeft*(pointsSystem2025.race[1]+pointsSystem2025.sprint[1])};};","map":{"version":3,"names":["pointsSystem2025","calculate2025Scenario","raceName","raceResults","sprintResults","arguments","length","undefined","currentStandings","newStandings","JSON","parse","stringify","forEach","result","driver","find","d","id","pointsToAdd","race","position","points","wins","podiums","sprint","sprintPoints","sort","a","b","index","standings","hasSprint","calculatePointsDifference","driver1Id","driver2Id","racesRemaining","driver1","driver2","pointsDifference","racesLeft","pointsNeeded","avgPerRace","maxPossiblePoints"],"sources":["/Users/abisek/Library/CloudStorage/OneDrive-MarymountUniversity/MU Codes/repos/f1-app/src/utils/calculations.js"],"sourcesContent":["import { pointsSystem2025 } from './f1Data';\n\nexport const calculate2025Scenario = (raceName, raceResults, sprintResults = [], currentStandings) => {\n  const newStandings = JSON.parse(JSON.stringify(currentStandings));\n\n  // Calculate race points\n  raceResults.forEach(result => {\n    const driver = newStandings.find(d => d.id === result.driver);\n    if (!driver) return;\n    \n    const pointsToAdd = pointsSystem2025.race[result.position] || 0;\n    driver.points += pointsToAdd;\n    \n    if (result.position === 1) driver.wins += 1;\n    if (result.position <= 3) driver.podiums = (driver.podiums || 0) + 1;\n  });\n\n  // Calculate sprint points\n  sprintResults.forEach(result => {\n    const driver = newStandings.find(d => d.id === result.driver);\n    if (!driver) return;\n    \n    const pointsToAdd = pointsSystem2025.sprint[result.position] || 0;\n    driver.points += pointsToAdd;\n    driver.sprintPoints = (driver.sprintPoints || 0) + pointsToAdd;\n  });\n\n  // Update positions\n  newStandings.sort((a, b) => b.points - a.points);\n  newStandings.forEach((driver, index) => {\n    driver.position = index + 1;\n  });\n  \n  return {\n    race: raceName,\n    standings: newStandings,\n    hasSprint: sprintResults.length > 0\n  };\n};\n\nexport const calculatePointsDifference = (driver1Id, driver2Id, currentStandings, racesRemaining) => {\n  const driver1 = currentStandings.find(d => d.id === driver1Id);\n  const driver2 = currentStandings.find(d => d.id === driver2Id);\n  \n  if (!driver1 || !driver2) return null;\n  \n  const pointsDifference = driver1.points - driver2.points;\n  const racesLeft = racesRemaining.length;\n  \n  return {\n    driver1,\n    driver2,\n    pointsNeeded: pointsDifference + 1,\n    avgPerRace: (pointsDifference + 1) / racesLeft,\n    racesLeft,\n    maxPossiblePoints: racesLeft * (pointsSystem2025.race[1] + pointsSystem2025.sprint[1])\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}