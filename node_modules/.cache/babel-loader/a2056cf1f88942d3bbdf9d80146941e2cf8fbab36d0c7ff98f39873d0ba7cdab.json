{"ast":null,"code":"import{get2025DriverStandings,get2025RaceSchedule,get2025RaceResults,get2025SprintResults}from'../api/ergast';// Cache for 2025 data\nlet cached2025Data={standings:null,races:null};export const load2025Data=async()=>{try{const[standings,races]=await Promise.all([get2025DriverStandings(),get2025RaceSchedule()]);cached2025Data={standings,races};return cached2025Data;}catch(error){console.error('Error loading 2025 season data:',error);return cached2025Data;}};export const get2025Standings=()=>{var _cached2025Data$stand;return((_cached2025Data$stand=cached2025Data.standings)===null||_cached2025Data$stand===void 0?void 0:_cached2025Data$stand.map(driver=>{var _driver$Constructors$;return{id:driver.Driver.driverId,number:driver.Driver.permanentNumber||'N/A',name:\"\".concat(driver.Driver.givenName,\" \").concat(driver.Driver.familyName),team:((_driver$Constructors$=driver.Constructors[0])===null||_driver$Constructors$===void 0?void 0:_driver$Constructors$.name)||'Unknown',points:parseInt(driver.points,10),wins:parseInt(driver.wins,10),position:parseInt(driver.position,10),sprintPoints:0// Initialize for sprint races\n};}))||[];};export const get2025UpcomingRaces=()=>{var _cached2025Data$races;const now=new Date();return((_cached2025Data$races=cached2025Data.races)===null||_cached2025Data$races===void 0?void 0:_cached2025Data$races.filter(race=>{const raceDate=new Date(race.date);return raceDate>now;}).map(race=>({id:race.round,name:race.raceName,date:race.date,circuit:race.Circuit.circuitName,completed:false,hasSprint:false// Set based on 2025 calendar\n})))||[];};export const refresh2025Data=async()=>{try{cached2025Data={standings:null,races:null};return await load2025Data();}catch(error){console.error('Error refreshing data:',error);throw error;}};// Updated points system for 2025 (modify if regulations change)\nexport const pointsSystem2025={race:{1:25,2:18,3:15,4:12,5:10,6:8,7:6,8:4,9:2,10:1,fastestLap:1},sprint:{1:8,2:7,3:6,4:5,5:4,6:3,7:2,8:1,fastestLap:0// Typically no FL point in sprints\n}};","map":{"version":3,"names":["get2025DriverStandings","get2025RaceSchedule","get2025RaceResults","get2025SprintResults","cached2025Data","standings","races","load2025Data","Promise","all","error","console","get2025Standings","_cached2025Data$stand","map","driver","_driver$Constructors$","id","Driver","driverId","number","permanentNumber","name","concat","givenName","familyName","team","Constructors","points","parseInt","wins","position","sprintPoints","get2025UpcomingRaces","_cached2025Data$races","now","Date","filter","race","raceDate","date","round","raceName","circuit","Circuit","circuitName","completed","hasSprint","refresh2025Data","pointsSystem2025","fastestLap","sprint"],"sources":["/Users/abisek/Library/CloudStorage/OneDrive-MarymountUniversity/MU Codes/repos/f1-app/src/utils/f1Data.js"],"sourcesContent":["import {\n  get2025DriverStandings,\n  get2025RaceSchedule,\n  get2025RaceResults,\n  get2025SprintResults\n} from '../api/ergast';\n\n// Cache for 2025 data\nlet cached2025Data = {\n  standings: null,\n  races: null\n};\n\nexport const load2025Data = async () => {\n  try {\n    const [standings, races] = await Promise.all([\n      get2025DriverStandings(),\n      get2025RaceSchedule()\n    ]);\n    \n    cached2025Data = {\n      standings,\n      races\n    };\n    \n    return cached2025Data;\n  } catch (error) {\n    console.error('Error loading 2025 season data:', error);\n    return cached2025Data;\n  }\n};\n\nexport const get2025Standings = () => {\n  return cached2025Data.standings?.map(driver => ({\n    id: driver.Driver.driverId,\n    number: driver.Driver.permanentNumber || 'N/A',\n    name: `${driver.Driver.givenName} ${driver.Driver.familyName}`,\n    team: driver.Constructors[0]?.name || 'Unknown',\n    points: parseInt(driver.points, 10),\n    wins: parseInt(driver.wins, 10),\n    position: parseInt(driver.position, 10),\n    sprintPoints: 0 // Initialize for sprint races\n  })) || [];\n};\n\nexport const get2025UpcomingRaces = () => {\n  const now = new Date();\n  return cached2025Data.races?.filter(race => {\n    const raceDate = new Date(race.date);\n    return raceDate > now;\n  }).map(race => ({\n    id: race.round,\n    name: race.raceName,\n    date: race.date,\n    circuit: race.Circuit.circuitName,\n    completed: false,\n    hasSprint: false // Set based on 2025 calendar\n  })) || [];\n};\nexport const refresh2025Data = async () => {\n  try {\n    cached2025Data = {\n      standings: null,\n      races: null\n    };\n    return await load2025Data();\n  } catch (error) {\n    console.error('Error refreshing data:', error);\n    throw error;\n  }\n};\n// Updated points system for 2025 (modify if regulations change)\nexport const pointsSystem2025 = {\n  race: {\n    1: 25, 2: 18, 3: 15, 4: 12, 5: 10, \n    6: 8, 7: 6, 8: 4, 9: 2, 10: 1,\n    fastestLap: 1\n  },\n  sprint: {\n    1: 8, 2: 7, 3: 6, 4: 5, 5: 4,\n    6: 3, 7: 2, 8: 1,\n    fastestLap: 0 // Typically no FL point in sprints\n  }\n};"],"mappings":"AAAA,OACEA,sBAAsB,CACtBC,mBAAmB,CACnBC,kBAAkB,CAClBC,oBAAoB,KACf,eAAe,CAEtB;AACA,GAAI,CAAAC,cAAc,CAAG,CACnBC,SAAS,CAAE,IAAI,CACfC,KAAK,CAAE,IACT,CAAC,CAED,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAAA,CAAA,GAAY,CACtC,GAAI,CACF,KAAM,CAACF,SAAS,CAAEC,KAAK,CAAC,CAAG,KAAM,CAAAE,OAAO,CAACC,GAAG,CAAC,CAC3CT,sBAAsB,CAAC,CAAC,CACxBC,mBAAmB,CAAC,CAAC,CACtB,CAAC,CAEFG,cAAc,CAAG,CACfC,SAAS,CACTC,KACF,CAAC,CAED,MAAO,CAAAF,cAAc,CACvB,CAAE,MAAOM,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,CAAEA,KAAK,CAAC,CACvD,MAAO,CAAAN,cAAc,CACvB,CACF,CAAC,CAED,MAAO,MAAM,CAAAQ,gBAAgB,CAAGA,CAAA,GAAM,KAAAC,qBAAA,CACpC,MAAO,EAAAA,qBAAA,CAAAT,cAAc,CAACC,SAAS,UAAAQ,qBAAA,iBAAxBA,qBAAA,CAA0BC,GAAG,CAACC,MAAM,OAAAC,qBAAA,OAAK,CAC9CC,EAAE,CAAEF,MAAM,CAACG,MAAM,CAACC,QAAQ,CAC1BC,MAAM,CAAEL,MAAM,CAACG,MAAM,CAACG,eAAe,EAAI,KAAK,CAC9CC,IAAI,IAAAC,MAAA,CAAKR,MAAM,CAACG,MAAM,CAACM,SAAS,MAAAD,MAAA,CAAIR,MAAM,CAACG,MAAM,CAACO,UAAU,CAAE,CAC9DC,IAAI,CAAE,EAAAV,qBAAA,CAAAD,MAAM,CAACY,YAAY,CAAC,CAAC,CAAC,UAAAX,qBAAA,iBAAtBA,qBAAA,CAAwBM,IAAI,GAAI,SAAS,CAC/CM,MAAM,CAAEC,QAAQ,CAACd,MAAM,CAACa,MAAM,CAAE,EAAE,CAAC,CACnCE,IAAI,CAAED,QAAQ,CAACd,MAAM,CAACe,IAAI,CAAE,EAAE,CAAC,CAC/BC,QAAQ,CAAEF,QAAQ,CAACd,MAAM,CAACgB,QAAQ,CAAE,EAAE,CAAC,CACvCC,YAAY,CAAE,CAAE;AAClB,CAAC,EAAC,CAAC,GAAI,EAAE,CACX,CAAC,CAED,MAAO,MAAM,CAAAC,oBAAoB,CAAGA,CAAA,GAAM,KAAAC,qBAAA,CACxC,KAAM,CAAAC,GAAG,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CACtB,MAAO,EAAAF,qBAAA,CAAA9B,cAAc,CAACE,KAAK,UAAA4B,qBAAA,iBAApBA,qBAAA,CAAsBG,MAAM,CAACC,IAAI,EAAI,CAC1C,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAH,IAAI,CAACE,IAAI,CAACE,IAAI,CAAC,CACpC,MAAO,CAAAD,QAAQ,CAAGJ,GAAG,CACvB,CAAC,CAAC,CAACrB,GAAG,CAACwB,IAAI,GAAK,CACdrB,EAAE,CAAEqB,IAAI,CAACG,KAAK,CACdnB,IAAI,CAAEgB,IAAI,CAACI,QAAQ,CACnBF,IAAI,CAAEF,IAAI,CAACE,IAAI,CACfG,OAAO,CAAEL,IAAI,CAACM,OAAO,CAACC,WAAW,CACjCC,SAAS,CAAE,KAAK,CAChBC,SAAS,CAAE,KAAM;AACnB,CAAC,CAAC,CAAC,GAAI,EAAE,CACX,CAAC,CACD,MAAO,MAAM,CAAAC,eAAe,CAAG,KAAAA,CAAA,GAAY,CACzC,GAAI,CACF5C,cAAc,CAAG,CACfC,SAAS,CAAE,IAAI,CACfC,KAAK,CAAE,IACT,CAAC,CACD,MAAO,MAAM,CAAAC,YAAY,CAAC,CAAC,CAC7B,CAAE,MAAOG,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CACD;AACA,MAAO,MAAM,CAAAuC,gBAAgB,CAAG,CAC9BX,IAAI,CAAE,CACJ,CAAC,CAAE,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,CAAE,EAAE,CACjC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,CAC7BY,UAAU,CAAE,CACd,CAAC,CACDC,MAAM,CAAE,CACN,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAC5B,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAChBD,UAAU,CAAE,CAAE;AAChB,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}