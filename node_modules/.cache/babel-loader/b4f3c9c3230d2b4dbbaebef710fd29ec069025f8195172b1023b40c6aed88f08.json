{"ast":null,"code":"import { pointsSystem2025 } from './f1Data';\nexport const calculate2025Scenario = (raceName, raceResults, sprintResults, currentStandings) => {\n  const newStandings = JSON.parse(JSON.stringify(currentStandings));\n\n  // Calculate race points\n  raceResults.forEach(result => {\n    const driver = newStandings.find(d => d.id === result.driver);\n    if (!driver) return;\n    const pointsToAdd = pointsSystem2025.race[result.position] || 0;\n    driver.points += pointsToAdd;\n    if (result.position === 1) driver.wins += 1;\n  });\n\n  // Calculate sprint points (if any)\n  sprintResults.forEach(result => {\n    const driver = newStandings.find(d => d.id === result.driver);\n    if (!driver) return;\n    const pointsToAdd = pointsSystem2025.sprint[result.position] || 0;\n    driver.points += pointsToAdd;\n    driver.sprintPoints += pointsToAdd;\n  });\n\n  // Sort by points descending\n  newStandings.sort((a, b) => b.points - a.points);\n  return {\n    race: raceName,\n    standings: newStandings,\n    hasSprint: sprintResults.length > 0\n  };\n};","map":{"version":3,"names":["pointsSystem2025","calculate2025Scenario","raceName","raceResults","sprintResults","currentStandings","newStandings","JSON","parse","stringify","forEach","result","driver","find","d","id","pointsToAdd","race","position","points","wins","sprint","sprintPoints","sort","a","b","standings","hasSprint","length"],"sources":["/Users/abisek/Library/CloudStorage/OneDrive-MarymountUniversity/MU Codes/repos/f1-app/leaderboard-app/src/utils/calculations.js"],"sourcesContent":["import { pointsSystem2025 } from './f1Data';\n\nexport const calculate2025Scenario = (raceName, raceResults, sprintResults, currentStandings) => {\n  const newStandings = JSON.parse(JSON.stringify(currentStandings));\n\n  // Calculate race points\n  raceResults.forEach(result => {\n    const driver = newStandings.find(d => d.id === result.driver);\n    if (!driver) return;\n    \n    const pointsToAdd = pointsSystem2025.race[result.position] || 0;\n    driver.points += pointsToAdd;\n    \n    if (result.position === 1) driver.wins += 1;\n  });\n\n  // Calculate sprint points (if any)\n  sprintResults.forEach(result => {\n    const driver = newStandings.find(d => d.id === result.driver);\n    if (!driver) return;\n    \n    const pointsToAdd = pointsSystem2025.sprint[result.position] || 0;\n    driver.points += pointsToAdd;\n    driver.sprintPoints += pointsToAdd;\n  });\n\n  // Sort by points descending\n  newStandings.sort((a, b) => b.points - a.points);\n  \n  return {\n    race: raceName,\n    standings: newStandings,\n    hasSprint: sprintResults.length > 0\n  };\n};"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,UAAU;AAE3C,OAAO,MAAMC,qBAAqB,GAAGA,CAACC,QAAQ,EAAEC,WAAW,EAAEC,aAAa,EAAEC,gBAAgB,KAAK;EAC/F,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACJ,gBAAgB,CAAC,CAAC;;EAEjE;EACAF,WAAW,CAACO,OAAO,CAACC,MAAM,IAAI;IAC5B,MAAMC,MAAM,GAAGN,YAAY,CAACO,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKJ,MAAM,CAACC,MAAM,CAAC;IAC7D,IAAI,CAACA,MAAM,EAAE;IAEb,MAAMI,WAAW,GAAGhB,gBAAgB,CAACiB,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,IAAI,CAAC;IAC/DN,MAAM,CAACO,MAAM,IAAIH,WAAW;IAE5B,IAAIL,MAAM,CAACO,QAAQ,KAAK,CAAC,EAAEN,MAAM,CAACQ,IAAI,IAAI,CAAC;EAC7C,CAAC,CAAC;;EAEF;EACAhB,aAAa,CAACM,OAAO,CAACC,MAAM,IAAI;IAC9B,MAAMC,MAAM,GAAGN,YAAY,CAACO,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKJ,MAAM,CAACC,MAAM,CAAC;IAC7D,IAAI,CAACA,MAAM,EAAE;IAEb,MAAMI,WAAW,GAAGhB,gBAAgB,CAACqB,MAAM,CAACV,MAAM,CAACO,QAAQ,CAAC,IAAI,CAAC;IACjEN,MAAM,CAACO,MAAM,IAAIH,WAAW;IAC5BJ,MAAM,CAACU,YAAY,IAAIN,WAAW;EACpC,CAAC,CAAC;;EAEF;EACAV,YAAY,CAACiB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACN,MAAM,GAAGK,CAAC,CAACL,MAAM,CAAC;EAEhD,OAAO;IACLF,IAAI,EAAEf,QAAQ;IACdwB,SAAS,EAAEpB,YAAY;IACvBqB,SAAS,EAAEvB,aAAa,CAACwB,MAAM,GAAG;EACpC,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}