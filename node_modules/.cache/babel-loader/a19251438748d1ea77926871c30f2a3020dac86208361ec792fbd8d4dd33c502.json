{"ast":null,"code":"import { get2025DriverStandings, get2025RaceSchedule, get2025RaceResults, get2025SprintResults } from '../api/ergast';\n\n// Cache for 2025 data\nlet cached2025Data = {\n  standings: null,\n  races: null\n};\nexport const load2025Data = async () => {\n  try {\n    const [standings, races] = await Promise.all([get2025DriverStandings(), get2025RaceSchedule()]);\n    cached2025Data = {\n      standings,\n      races\n    };\n    return cached2025Data;\n  } catch (error) {\n    console.error('Error loading 2025 season data:', error);\n    return cached2025Data;\n  }\n};\nexport const get2025Standings = () => {\n  var _cached2025Data$stand;\n  return ((_cached2025Data$stand = cached2025Data.standings) === null || _cached2025Data$stand === void 0 ? void 0 : _cached2025Data$stand.map(driver => {\n    var _driver$Constructors$;\n    return {\n      id: driver.Driver.driverId,\n      number: driver.Driver.permanentNumber || 'N/A',\n      name: `${driver.Driver.givenName} ${driver.Driver.familyName}`,\n      team: ((_driver$Constructors$ = driver.Constructors[0]) === null || _driver$Constructors$ === void 0 ? void 0 : _driver$Constructors$.name) || 'Unknown',\n      points: parseInt(driver.points, 10),\n      wins: parseInt(driver.wins, 10),\n      position: parseInt(driver.position, 10),\n      sprintPoints: 0 // Initialize for sprint races\n    };\n  })) || [];\n};\nexport const get2025UpcomingRaces = () => {\n  var _cached2025Data$races;\n  const now = new Date();\n  return ((_cached2025Data$races = cached2025Data.races) === null || _cached2025Data$races === void 0 ? void 0 : _cached2025Data$races.filter(race => {\n    const raceDate = new Date(race.date);\n    return raceDate > now;\n  }).map(race => ({\n    id: race.round,\n    name: race.raceName,\n    date: race.date,\n    circuit: race.Circuit.circuitName,\n    completed: false,\n    hasSprint: false // Set based on 2025 calendar\n  }))) || [];\n};\n\n// Updated points system for 2025 (modify if regulations change)\nexport const pointsSystem2025 = {\n  race: {\n    1: 25,\n    2: 18,\n    3: 15,\n    4: 12,\n    5: 10,\n    6: 8,\n    7: 6,\n    8: 4,\n    9: 2,\n    10: 1,\n    fastestLap: 1\n  },\n  sprint: {\n    1: 8,\n    2: 7,\n    3: 6,\n    4: 5,\n    5: 4,\n    6: 3,\n    7: 2,\n    8: 1,\n    fastestLap: 0 // Typically no FL point in sprints\n  }\n};","map":{"version":3,"names":["get2025DriverStandings","get2025RaceSchedule","get2025RaceResults","get2025SprintResults","cached2025Data","standings","races","load2025Data","Promise","all","error","console","get2025Standings","_cached2025Data$stand","map","driver","_driver$Constructors$","id","Driver","driverId","number","permanentNumber","name","givenName","familyName","team","Constructors","points","parseInt","wins","position","sprintPoints","get2025UpcomingRaces","_cached2025Data$races","now","Date","filter","race","raceDate","date","round","raceName","circuit","Circuit","circuitName","completed","hasSprint","pointsSystem2025","fastestLap","sprint"],"sources":["/Users/abisek/Library/CloudStorage/OneDrive-MarymountUniversity/MU Codes/repos/f1-app/leaderboard-app/src/utils/f1Data.js"],"sourcesContent":["import {\n  get2025DriverStandings,\n  get2025RaceSchedule,\n  get2025RaceResults,\n  get2025SprintResults\n} from '../api/ergast';\n\n// Cache for 2025 data\nlet cached2025Data = {\n  standings: null,\n  races: null\n};\n\nexport const load2025Data = async () => {\n  try {\n    const [standings, races] = await Promise.all([\n      get2025DriverStandings(),\n      get2025RaceSchedule()\n    ]);\n    \n    cached2025Data = {\n      standings,\n      races\n    };\n    \n    return cached2025Data;\n  } catch (error) {\n    console.error('Error loading 2025 season data:', error);\n    return cached2025Data;\n  }\n};\n\nexport const get2025Standings = () => {\n  return cached2025Data.standings?.map(driver => ({\n    id: driver.Driver.driverId,\n    number: driver.Driver.permanentNumber || 'N/A',\n    name: `${driver.Driver.givenName} ${driver.Driver.familyName}`,\n    team: driver.Constructors[0]?.name || 'Unknown',\n    points: parseInt(driver.points, 10),\n    wins: parseInt(driver.wins, 10),\n    position: parseInt(driver.position, 10),\n    sprintPoints: 0 // Initialize for sprint races\n  })) || [];\n};\n\nexport const get2025UpcomingRaces = () => {\n  const now = new Date();\n  return cached2025Data.races?.filter(race => {\n    const raceDate = new Date(race.date);\n    return raceDate > now;\n  }).map(race => ({\n    id: race.round,\n    name: race.raceName,\n    date: race.date,\n    circuit: race.Circuit.circuitName,\n    completed: false,\n    hasSprint: false // Set based on 2025 calendar\n  })) || [];\n};\n\n// Updated points system for 2025 (modify if regulations change)\nexport const pointsSystem2025 = {\n  race: {\n    1: 25, 2: 18, 3: 15, 4: 12, 5: 10, \n    6: 8, 7: 6, 8: 4, 9: 2, 10: 1,\n    fastestLap: 1\n  },\n  sprint: {\n    1: 8, 2: 7, 3: 6, 4: 5, 5: 4,\n    6: 3, 7: 2, 8: 1,\n    fastestLap: 0 // Typically no FL point in sprints\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}