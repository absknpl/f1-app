{"ast":null,"code":"import { pointsSystem } from './f1Data';\nexport const calculateScenario = (raceName, raceResults, currentStandings) => {\n  // Clone current standings to avoid mutation\n  const newStandings = JSON.parse(JSON.stringify(currentStandings));\n\n  // Calculate points for each driver based on race results\n  raceResults.forEach(result => {\n    if (!result.driver) return;\n    const driver = newStandings.find(d => d.id === result.driver);\n    if (!driver) return;\n    const position = result.position;\n    const points = pointsSystem[position] || 0;\n    driver.points += points;\n\n    // Update wins and podiums\n    if (position === 1) driver.wins += 1;\n    if (position <= 3) driver.podiums += 1;\n  });\n\n  // Sort by points descending\n  newStandings.sort((a, b) => b.points - a.points);\n  return {\n    race: raceName,\n    standings: newStandings\n  };\n};\nexport const calculatePointsNeeded = (driver1Id, driver2Id, currentStandings, racesRemaining) => {\n  const driver1 = currentStandings.find(d => d.id === driver1Id);\n  const driver2 = currentStandings.find(d => d.id === driver2Id);\n  if (!driver1 || !driver2) return null;\n  const pointsDifference = driver1.points - driver2.points;\n  const racesLeft = racesRemaining.length;\n  return {\n    driver1,\n    driver2,\n    pointsNeeded: pointsDifference + 1,\n    // Need to be at least 1 point ahead\n    avgPerRace: (pointsDifference + 1) / racesLeft,\n    racesLeft\n  };\n};","map":{"version":3,"names":["pointsSystem","calculateScenario","raceName","raceResults","currentStandings","newStandings","JSON","parse","stringify","forEach","result","driver","find","d","id","position","points","wins","podiums","sort","a","b","race","standings","calculatePointsNeeded","driver1Id","driver2Id","racesRemaining","driver1","driver2","pointsDifference","racesLeft","length","pointsNeeded","avgPerRace"],"sources":["/Users/abisek/Library/CloudStorage/OneDrive-MarymountUniversity/MU Codes/repos/f1-app/leaderboard-app/src/utils/calculations.js"],"sourcesContent":["import { pointsSystem } from './f1Data';\n\nexport const calculateScenario = (raceName, raceResults, currentStandings) => {\n  // Clone current standings to avoid mutation\n  const newStandings = JSON.parse(JSON.stringify(currentStandings));\n  \n  // Calculate points for each driver based on race results\n  raceResults.forEach(result => {\n    if (!result.driver) return;\n    \n    const driver = newStandings.find(d => d.id === result.driver);\n    if (!driver) return;\n    \n    const position = result.position;\n    const points = pointsSystem[position] || 0;\n    \n    driver.points += points;\n    \n    // Update wins and podiums\n    if (position === 1) driver.wins += 1;\n    if (position <= 3) driver.podiums += 1;\n  });\n  \n  // Sort by points descending\n  newStandings.sort((a, b) => b.points - a.points);\n  \n  return {\n    race: raceName,\n    standings: newStandings\n  };\n};\n\nexport const calculatePointsNeeded = (driver1Id, driver2Id, currentStandings, racesRemaining) => {\n  const driver1 = currentStandings.find(d => d.id === driver1Id);\n  const driver2 = currentStandings.find(d => d.id === driver2Id);\n  \n  if (!driver1 || !driver2) return null;\n  \n  const pointsDifference = driver1.points - driver2.points;\n  const racesLeft = racesRemaining.length;\n  \n  return {\n    driver1,\n    driver2,\n    pointsNeeded: pointsDifference + 1, // Need to be at least 1 point ahead\n    avgPerRace: (pointsDifference + 1) / racesLeft,\n    racesLeft\n  };\n};"],"mappings":"AAAA,SAASA,YAAY,QAAQ,UAAU;AAEvC,OAAO,MAAMC,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,WAAW,EAAEC,gBAAgB,KAAK;EAC5E;EACA,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACJ,gBAAgB,CAAC,CAAC;;EAEjE;EACAD,WAAW,CAACM,OAAO,CAACC,MAAM,IAAI;IAC5B,IAAI,CAACA,MAAM,CAACC,MAAM,EAAE;IAEpB,MAAMA,MAAM,GAAGN,YAAY,CAACO,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKJ,MAAM,CAACC,MAAM,CAAC;IAC7D,IAAI,CAACA,MAAM,EAAE;IAEb,MAAMI,QAAQ,GAAGL,MAAM,CAACK,QAAQ;IAChC,MAAMC,MAAM,GAAGhB,YAAY,CAACe,QAAQ,CAAC,IAAI,CAAC;IAE1CJ,MAAM,CAACK,MAAM,IAAIA,MAAM;;IAEvB;IACA,IAAID,QAAQ,KAAK,CAAC,EAAEJ,MAAM,CAACM,IAAI,IAAI,CAAC;IACpC,IAAIF,QAAQ,IAAI,CAAC,EAAEJ,MAAM,CAACO,OAAO,IAAI,CAAC;EACxC,CAAC,CAAC;;EAEF;EACAb,YAAY,CAACc,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACL,MAAM,GAAGI,CAAC,CAACJ,MAAM,CAAC;EAEhD,OAAO;IACLM,IAAI,EAAEpB,QAAQ;IACdqB,SAAS,EAAElB;EACb,CAAC;AACH,CAAC;AAED,OAAO,MAAMmB,qBAAqB,GAAGA,CAACC,SAAS,EAAEC,SAAS,EAAEtB,gBAAgB,EAAEuB,cAAc,KAAK;EAC/F,MAAMC,OAAO,GAAGxB,gBAAgB,CAACQ,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKW,SAAS,CAAC;EAC9D,MAAMI,OAAO,GAAGzB,gBAAgB,CAACQ,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKY,SAAS,CAAC;EAE9D,IAAI,CAACE,OAAO,IAAI,CAACC,OAAO,EAAE,OAAO,IAAI;EAErC,MAAMC,gBAAgB,GAAGF,OAAO,CAACZ,MAAM,GAAGa,OAAO,CAACb,MAAM;EACxD,MAAMe,SAAS,GAAGJ,cAAc,CAACK,MAAM;EAEvC,OAAO;IACLJ,OAAO;IACPC,OAAO;IACPI,YAAY,EAAEH,gBAAgB,GAAG,CAAC;IAAE;IACpCI,UAAU,EAAE,CAACJ,gBAAgB,GAAG,CAAC,IAAIC,SAAS;IAC9CA;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}